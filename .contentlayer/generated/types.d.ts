// NOTE This file is auto-generated by Contentlayer

import type { Markdown, MDX, ImageFieldData, IsoDateTimeString } from 'contentlayer2/core'
import * as Local from 'contentlayer2/source-files'

export { isType } from 'contentlayer2/client'

export type { Markdown, MDX, ImageFieldData, IsoDateTimeString }

/** Document types */
export type Brand = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Brand'
  title: string
  description?: string | undefined
  date: IsoDateTimeString
  authors: AuthorsProperties[]
  published: boolean
  toc: boolean
  brandName: string
  logo: string
  foundedYear?: number | undefined
  headquarters?: string | undefined
  website?: string | undefined
  gallery?: GalleryImage[] | undefined
  categories?: string[] | undefined
  /** MDX file body */
  body: MDX
  slug: string
  slugAsParams: string
  tableOfContents: json
  breadcrumb: json
}

export type Category = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Category'
  title: string
  description?: string | undefined
  date: IsoDateTimeString
  authors: AuthorsProperties[]
  published: boolean
  toc: boolean
  brandName: string
  categoryName: string
  cover?: string | undefined
  gallery?: GalleryImage[] | undefined
  features?: ProductFeature[] | undefined
  targetAudience?: string | undefined
  priceRange?: string | undefined
  /** MDX file body */
  body: MDX
  slug: string
  slugAsParams: string
  tableOfContents: json
  breadcrumb: json
}

export type Post = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Post'
  title: string
  description?: string | undefined
  date: IsoDateTimeString
  authors: AuthorsProperties[]
  published: boolean
  toc: boolean
  categories?: string[] | undefined
  cover?: string | undefined
  tags?: string[] | undefined
  /** MDX file body */
  body: MDX
  slug: string
  slugAsParams: string
  tableOfContents: json
  breadcrumb: json
}

export type Product = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Product'
  title: string
  description?: string | undefined
  date: IsoDateTimeString
  authors: AuthorsProperties[]
  published: boolean
  toc: boolean
  brandName: string
  categoryName: string
  productName: string
  sku?: string | undefined
  price?: number | undefined
  currency: string
  cover?: string | undefined
  gallery?: GalleryImage[] | undefined
  filterColor?: string | undefined
  nicotineLevel?: string | undefined
  tarLevel?: string | undefined
  packSize: number
  specifications?: ProductSpec[] | undefined
  features?: ProductFeature[] | undefined
  inStock: boolean
  featured: boolean
  newProduct: boolean
  tags?: string[] | undefined
  sortOrder: number
  /** MDX file body */
  body: MDX
  slug: string
  slugAsParams: string
  tableOfContents: json
  breadcrumb: json
}  

/** Nested types */
export type AuthorsProperties = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'AuthorsProperties'
  name?: string | undefined
  role?: string | undefined
  avatar?: string | undefined

}

export type GalleryImage = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'GalleryImage'
  src: string
  alt: string
  caption?: string | undefined
  thumbnail?: string | undefined

}

export type ProductFeature = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'ProductFeature'
  title: string
  description?: string | undefined
  icon?: string | undefined

}

export type ProductSpec = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'ProductSpec'
  name: string
  value: string

}  

/** Helper types */

export type AllTypes = DocumentTypes | NestedTypes
export type AllTypeNames = DocumentTypeNames | NestedTypeNames

export type DocumentTypes = Brand | Category | Post | Product
export type DocumentTypeNames = 'Brand' | 'Category' | 'Post' | 'Product'

export type NestedTypes = AuthorsProperties | GalleryImage | ProductFeature | ProductSpec
export type NestedTypeNames = 'AuthorsProperties' | 'GalleryImage' | 'ProductFeature' | 'ProductSpec'

export type DataExports = {
  allDocuments: DocumentTypes[]
  allBrands: Brand[]
  allCategories: Category[]
  allProducts: Product[]
  allPosts: Post[]
}


export interface ContentlayerGenTypes {
  documentTypes: DocumentTypes
  documentTypeMap: DocumentTypeMap
  documentTypeNames: DocumentTypeNames
  nestedTypes: NestedTypes
  nestedTypeMap: NestedTypeMap
  nestedTypeNames: NestedTypeNames
  allTypeNames: AllTypeNames
  dataExports: DataExports
}

declare global {
  interface ContentlayerGen extends ContentlayerGenTypes {}
}

export type DocumentTypeMap = {
  Brand: Brand
  Category: Category
  Post: Post
  Product: Product
}

export type NestedTypeMap = {
  AuthorsProperties: AuthorsProperties
  GalleryImage: GalleryImage
  ProductFeature: ProductFeature
  ProductSpec: ProductSpec
}

 